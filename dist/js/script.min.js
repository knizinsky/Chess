"use strict";var tileSize,gameBoard=document.getElementById("gameBoard"),ctx=gameBoard.getContext("2d"),brownColor="#653c10",whiteColor="#dfc795",board=[["r","p","","","","","P","R"],["n","p","","","","","P","N"],["b","p","","","","","P","B"],["q","p","","","","","P","Q"],["k","p","","","","","P","K"],["b","p","","","","","P","B"],["n","p","","","","","P","N"],["r","p","","","","","P","R"]],pieceNames={p:"Bpawn",r:"Brook",n:"Bknight",b:"Bbishop",q:"Bqueen",k:"Bking",P:"Wpawn",R:"Wrook",N:"Wknight",B:"Wbishop",Q:"Wqueen",K:"Wking"},resizeCanvas=function(){for(var e=window.innerWidth,o=window.innerHeight,i=Math.min(e,o,600),t=(gameBoard.width=i,gameBoard.height=i,tileSize=i/8,function(t){for(var e=function(e){ctx.fillStyle=r%2==0?n%2==0?whiteColor:brownColor:n%2==0?brownColor:whiteColor;var o,i=board[r][n];i in pieceNames&&(i=pieceNames[i],(o=new Image).src="./dist/img/".concat(i,".png"),o.onload=function(){ctx.drawImage(o,t,e,tileSize,tileSize)}),ctx.fillRect(t,e,tileSize,tileSize)},o=0,n=0;o<i;o+=tileSize,n++)e(o)}),n=0,r=0;n<i;n+=tileSize,r++)t(n)},getCursorPosition=function(e){var r,o=e.offsetX,e=e.offsetY,i=Math.floor(e/tileSize),t=Math.floor(o/tileSize),n=Math.floor(e/tileSize),a=Math.floor(o/tileSize);"p"==board[t][i]&&board.forEach(function(e,i){e.forEach(function(e,o){"p"==e&&n==o&&a==i&&(console.log(n,a),gameBoard.addEventListener("click",function(e){var o,i=e.offsetX,e=e.offsetY,t=Math.floor(e/tileSize),n=Math.floor(i/tileSize);""==board[n][t]&&(board[n][t]="p",r=board[n][t],(o=new Image).src="./dist/img/".concat(pieceNames[r],".png"),o.onload=function(){ctx.drawImage(o,n*tileSize,t*tileSize,tileSize,tileSize)}),console.log(t,n),console.log(board[n][t])}))})})};gameBoard.addEventListener("click",getCursorPosition),window.addEventListener("resize",resizeCanvas),resizeCanvas();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
